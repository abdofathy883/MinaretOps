name: Deploy .NET Backend with Safe Migrations

on:
  push:
    branches: [ main, master ]

env:
  PROJECT_ROOT: minaretopsapi
  PUBLISH_DIR: minaretopsapi/publish
  EFBUNDLE_PATH: minaretopsapi/efbundle
  SERVER_APP_DIR: /var/www/minaretopsapi
  SERVER_BACKUP_DIR: /var/backups
  DB_BACKUP_NAME: MinaretOps_$(date +%Y%m%d-%H%M%S).bak

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore MinaretOps.sln

      - name: Build
        run: dotnet build MinaretOps.sln --configuration Release --no-restore

      - name: Test
        run: dotnet test MinaretOps.sln --configuration Release --no-build

      # 1) Publish the API
      - name: Publish
        run: dotnet publish "Client API/Client API.csproj" --configuration Release --output ./publish

      # Expose publish dir as env var
      - name: Set PUBLISH_DIR
        run: echo "PUBLISH_DIR=./publish" >> $GITHUB_ENV

      # 2) Build EF migrations bundle (no SDK/tools needed on server)
      - name: Install EF Tools
        run: dotnet tool install --global dotnet-ef
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_NOLOGO: 1

      - name: Add .NET tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
        

      - name: Create EF Migrations Bundle
        run: |
          dotnet ef migrations bundle \
            --project "Infrastructure/Infrastructure.csproj" \
            --startup-project "Client API/Client API.csproj" \
            --output ./efbundle \
            --self-contained \
            --target-runtime linux-x64

      - name: List publish output
        run: ls -lah ./publish

        
      # 3) Upload publish output and efbundle to VPS
      - name: Upload published app
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: ${{ env.PUBLISH_DIR }}/*
          target: ${{ env.SERVER_APP_DIR }}
          # target: ${{ env.SERVER_APP_DIR }}/published
          strip_components: 2

      - name: Upload EF bundle
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          # source: ${{ env.EFBUNDLE_PATH }}
          source: ./efbundle
          target: ${{ env.SERVER_APP_DIR }}
          strip_components: 0

      # 4) Backup DB, run migrations, rebuild & restart containers
      - name: Run backup, migrate, and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script_stop: true
          script: |
            set -euo pipefail
            cd "${{ env.SERVER_APP_DIR }}"

            # --- Sanity checks ---
            if ! command -v docker &>/dev/null; then
              echo "Docker not found on server"; exit 1
            fi
            if ! docker ps --format '{{.Names}}' | grep -q '^sqlserver$'; then
              echo "SQL Server container 'sqlserver' not running. Starting docker compose..."
              docker compose up -d db
            fi

            # --- DB Backup ---
            BACKUP_DIR="${{ env.SERVER_BACKUP_DIR }}/db-$(date +%Y%m%d-%H%M%S)"
            BACKUP_NAME="MinaretOps_$(date +%Y%m%d-%H%M%S).bak"
            mkdir -p "$BACKUP_DIR"
            echo "Backing up database to $BACKUP_DIR/$BACKUP_NAME"

            docker exec sqlserver /opt/mssql-tools18/bin/sqlcmd \
              -S localhost -U sa -P "${{ secrets.SA_PASSWORD }}" \
              -C -N \
              -Q "BACKUP DATABASE [MinaretOps] TO DISK = N'/var/opt/mssql/backup/$BACKUP_NAME' WITH FORMAT, INIT, COMPRESSION"

            # Copy backup to host backup dir
            docker cp sqlserver:/var/opt/mssql/backup/$BACKUP_NAME "$BACKUP_DIR"/

            # --- Apply EF migration bundle ---
            chmod +x ./efbundle
            echo "Applying EF migrations bundle..."
            # Host connects to the db container via published port 1433 -> localhost,1433
            ConnectionStrings__DefaultConnection="Server=localhost,1433;Database=MinaretOps;User Id=sa;Password=${{ secrets.SA_PASSWORD }};TrustServerCertificate=true" ./efbundle


            echo "Migrations applied successfully."

            # --- Deploy app containers ---
            echo "Rebuilding and starting containers..."
            docker compose down
            docker compose build --no-cache
            docker compose up -d

            echo "Waiting for app container..."
            sleep 50

            if ! docker ps --format '{{.Names}}' | grep -q 'clientapi'; then
              echo "App container not running after deploy. Aborting."
              docker ps -a
              exit 1
            fi

            docker image prune -f
            echo "Deployment completed successfully."
