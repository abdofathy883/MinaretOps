name: Deploy .NET Backend with Safe Migrations

on:
  push:
    branches: [ main, master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore MinaretOps.sln

      - name: Build
        run: dotnet build MinaretOps.sln --configuration Release --no-restore

      - name: Test
        run: dotnet test MinaretOps.sln --configuration Release --no-build

      - name: Publish
        run: dotnet publish "ClientAPI/ClientAPI.csproj" --configuration Release --output ./publish

      - name: Install EF Tools
        run: dotnet tool install --global dotnet-ef

      - name: Create EF Migrations Bundle
        run: |
          dotnet ef migrations bundle \
            --project "Infrastructure/Infrastructure.csproj" \
            --startup-project "ClientAPI/ClientAPI.csproj" \
            --output ./efbundle \
            --self-contained \
            --target-runtime linux-x64

      - name: Prepare Deployment Package
        run: |
          mkdir -p ./deployment
          # Copy published files
          cp -r ./publish/* ./deployment/
          # Copy Docker files
          cp docker-compose.yml ./deployment/
          cp docker-compose.override.yml ./deployment/
          cp "ClientAPI/Dockerfile" ./deployment/Dockerfile
          # Copy EF bundle
          cp ./efbundle ./deployment/

      - name: Upload Deployment Package
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "./deployment"
          target: "/var/www"
          strip_components: 0
          overwrite: true

      - name: Deploy on Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script_stop: true
          script: |
            set -euo pipefail
            cd /var/www/deployment

            # --- Sanity checks ---
            if ! command -v docker &>/dev/null; then
              echo "Docker not found on server"; exit 1
            fi
            if ! docker ps --format '{{.Names}}' | grep -q '^sqlserver$'; then
              echo "SQL Server container 'sqlserver' not running. Starting docker compose..."
              docker compose up -d db
            fi

            # --- Wait for SQL Server to be healthy ---
            echo "Waiting for SQL Server to be ready..."
            for i in {1..30}; do
              if docker exec sqlserver /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "${{ secrets.SA_PASSWORD }}" -Q "SELECT 1" &>/dev/null; then
                echo "SQL Server is ready!"
                break
              fi
              echo "Waiting for SQL Server... ($i/30)"
              sleep 10
            done

            # --- DB Backup ---
            # BACKUP_DIR="/var/backups/db-$(date +%Y%m%d-%H%M%S)"
            # BACKUP_NAME="MinaretOps_$(date +%Y%m%d-%H%M%S).bak"
            # mkdir -p "$BACKUP_DIR"
            # echo "Backing up database to $BACKUP_DIR/$BACKUP_NAME"


            # if docker exec sqlserver /opt/mssql-tools18/bin/sqlcmd \
            #     -S tcp:localhost,1433 -U sa -P "${{ secrets.SA_PASSWORD }}" -C \
            #     -Q "IF DB_ID('MinaretOps') IS NULL PRINT 'NO_DB'" \
            #     | grep -q "NO_DB"; then
            #   echo "Database MinaretOps does not exist, skipping backup."
            # else
            #   docker exec sqlserver /opt/mssql-tools18/bin/sqlcmd \
            #     -S tcp:localhost,1433 -U sa -P "${{ secrets.SA_PASSWORD }}" -C \
            #     # -C -N \
            #     -Q "BACKUP DATABASE [MinaretOps] TO DISK = N'/var/opt/mssql/backup/$BACKUP_NAME' WITH FORMAT, INIT, COMPRESSION"
            #   docker cp sqlserver:/var/opt/mssql/backup/$BACKUP_NAME "$BACKUP_DIR"/
            # fi

            # # Copy backup to host backup dir
            # docker cp sqlserver:/var/opt/mssql/backup/$BACKUP_NAME "$BACKUP_DIR"/

            # --- Apply EF migration bundle ---
            chmod +x ./efbundle
            echo "Applying EF migrations bundle..."
            ConnectionStrings__DefaultConnection="Server=localhost,1433;Database=MinaretOps;User Id=sa;Password=${{ secrets.SA_PASSWORD }};TrustServerCertificate=true" ./efbundle

            echo "Migrations applied successfully."

            # --- Deploy app containers ---
            echo "Rebuilding and starting containers..."
            docker compose down
            docker compose build --no-cache
            docker compose up -d

            echo "Waiting for app container..."
            sleep 50

            if ! docker ps --format '{{.Names}}' | grep -q 'clientapi'; then
              echo "App container not running after deploy. Aborting."
              docker ps -a
              exit 1
            fi

            docker image prune -f
            echo "Deployment completed successfully."
